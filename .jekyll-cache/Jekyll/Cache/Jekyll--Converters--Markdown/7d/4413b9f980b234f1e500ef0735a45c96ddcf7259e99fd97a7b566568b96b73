I"«<!--
You'll find this post in your `_posts` directory - edit this post and re-build (or run with the `-w` switch) to see your changes!
To add new posts, simply add a file in the `_posts` directory that follows the convention: YYYY-MM-DD-name-of-post.ext.

Jekyll also offers powerful support for code snippets:


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>


Check out the [Jekyll docs][jekyll] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll's GitHub repo][jekyll-gh].

[jekyll-gh]: https://github.com/jekyll/jekyll
[jekyll]:    http://jekyllrb.com

-->

<p>
Here's the code :
</p>

<!-- <img
src = "http://localhost:4000/assets/screenshot.jpg"
alt = "my helpful screenshot"
style="width:300px;height:300px;"
/> -->

<figure class="highlight"><pre><code class="language-c#" data-lang="c#">  <span class="k">using</span> <span class="nn">UnityEngine</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">FadeColor</span> <span class="p">:</span> <span class="n">MonoBehaviour</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="k">new</span> <span class="n">Camera</span> <span class="n">camera</span><span class="p">;</span>
    <span class="p">[</span><span class="n">SerializeField</span><span class="p">]</span> <span class="p">[</span><span class="nf">Range</span><span class="p">(</span><span class="m">0f</span><span class="p">,</span> <span class="m">1f</span><span class="p">)]</span> <span class="kt">float</span> <span class="n">lerpTime</span><span class="p">;</span>
    <span class="p">[</span><span class="n">SerializeField</span><span class="p">]</span> <span class="n">Color</span><span class="p">[]</span> <span class="n">myColors</span><span class="p">;</span>

    <span class="k">private</span> <span class="kt">int</span> <span class="n">colorIndex</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">float</span> <span class="n">t</span> <span class="p">=</span> <span class="m">0f</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">camera</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Camera</span><span class="p">&gt;();</span>
        <span class="n">len</span> <span class="p">=</span> <span class="n">myColors</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">camera</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="nf">Lerp</span><span class="p">(</span><span class="n">camera</span><span class="p">.</span><span class="n">backgroundColor</span><span class="p">,</span> <span class="n">myColors</span><span class="p">[</span><span class="n">colorIndex</span><span class="p">],</span> <span class="n">lerpTime</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">);</span>

        <span class="n">t</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="nf">Lerp</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="m">1f</span><span class="p">,</span> <span class="n">lerpTime</span> <span class="p">*</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="p">&gt;</span> <span class="m">0.9f</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">t</span> <span class="p">=</span> <span class="m">0f</span><span class="p">;</span>
            <span class="n">colorIndex</span><span class="p">++;</span>
            <span class="n">colorIndex</span> <span class="p">=</span> <span class="p">(</span><span class="n">colorIndex</span> <span class="p">&gt;=</span> <span class="n">len</span> <span class="p">?</span> <span class="m">0</span> <span class="p">:</span> <span class="n">colorIndex</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span></code></pre></figure>

<p>
Here's a demonstration on how to use the script :
</p>

<p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/-ZujPUORn94" frameborder="0" allowfullscreen=""></iframe>
</p>
:ET